package backend;

import java.io.*;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Scanner;


public class Detector {

    private File file;
    private File signatures;
    private File affectedFiles;
    private File resultFile;
    private File errorFile;

    String[] Md5_hash = new String[1789];
    Scanner scanner;


    public Detector(String path) {
        this.file = new File(path);
        if (this.file == null) {
            try {
                writeResult("Invalid file path " + path, errorFile);
            } catch (IOException e) {

                e.printStackTrace();
            }
        }
        this.affectedFiles = new File("D:\\Cyberpress Malware Scanner\\affected.txt");
        this.resultFile = new File("D:\\Cyberpress Malware Scanner\\result.txt");
        this.signatures = new File("D:\\Cyberpress Malware Scanner\\signatures.txt");
        this.errorFile = new File("D:\\Cyberpress Malware Scanner\\errors.txt");
        try {

            this.scanner = new Scanner(signatures);
            int i = 0;
            while (scanner.hasNext()) {
                Md5_hash[i++] = scanner.nextLine();
            }

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } finally {
            scanner.close();
        }
    }

    public void detect() {

        detect(file);
    }


    private void detect(File file) {
        md5_check obj = new md5_check();

        if (file != null) {
            FileInputStream mFileInputStream = null;
            String md5 = null;

            try {
                writeResult("scanning file " + file.getName() + " in " + file.getAbsolutePath(), resultFile);

            } catch (IOException e1) {

                e1.printStackTrace();
            }

            if (file.isDirectory()) {
                File[] contents = file.listFiles();
                for (File _file : contents) {
                    detect(_file);
                }
            } else {

                try {
                    mFileInputStream = new FileInputStream(file);
                    String path = file.getAbsolutePath();
                    md5_check object = new md5_check();
                    MessageDigest mdigest = MessageDigest.getInstance("MD5");
                    File filee = new File(path);
                    md5 =object.checksum(mdigest, filee);
                }
                catch (IOException | NoSuchAlgorithmException e1) {
                    try {
                        writeResult(
                                "=============================================================================================================================",
                                 errorFile);
                        writeResult("The following error occurred while scanning the file " + file.getAbsolutePath()+".",errorFile);
                        writeResult( "The error is shown below", errorFile);
                        writeResult(e1.getMessage(), errorFile);//changed
                    } catch (IOException ioe) {

                        ioe.printStackTrace();
                    }
                } finally {
                    try {
                        if (mFileInputStream != null)
                            mFileInputStream.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }

                for (int i =0; i<1789;i++) {
                    String signature = Md5_hash[i];
                    if (md5 != null && (md5.equalsIgnoreCase(signature))) {
                        try {
                            writeResult(file.getAbsolutePath(), affectedFiles);
                            break;
                        } catch (IOException e) {
                            try {
                                writeResult(
                                        "=============================================================================================================================",
                                        errorFile);
                                writeResult("The following error occurred while scanning the file "
                                        + file.getAbsolutePath() + " The error is shown below", errorFile);
                                writeResult(e.getMessage(), file);
                            } catch (IOException e1) {

                                e1.printStackTrace();
                            }
                        }
                    }

                }

            }
        } else {
            try {
                writeResult("Invalid file entry ", errorFile);
            } catch (IOException e) {

                e.printStackTrace();
            }
        }
    }


    private void writeResult(String result, File file) throws IOException {
        BufferedWriter writer = new BufferedWriter(new FileWriter(file, true));
        writer.append(result);
        writer.newLine();
        writer.flush();
        writer.close();
    }

}